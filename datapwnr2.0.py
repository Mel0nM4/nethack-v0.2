import time
import sys
import os
import random

print("The Upgraded Data Nabber")
print("⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⢠⡆⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⠀⠈⣷⣄⠀⠀⠀⠀⣾⣷⠀⠀⠀⠀⣠⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⠀⠀⢿⠿⠃⠀⠀⠀⠉⠉⠁⠀⠀⠐⠿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣶⣶⣶⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⣠⣶⣿⣿⡿⣿⣿⣿⡿⠋⠉⠀⠀⠉⠙⢿⣿⣿⡿⣿⣿⣷⣦⡀⠀⠀⠀")
print("⠀⢀⣼⣿⣿⠟⠁⢠⣿⣿⠏⠀⠀⢠⣤⣤⡀⠀⠀⢻⣿⣿⡀⠙⢿⣿⣿⣦⠀⠀         All")
print("⣰⣿⣿⡟⠁⠀⠀⢸⣿⣿⠀⠀⠀⢿⣿⣿⡟⠀⠀⠈⣿⣿⡇⠀⠀⠙⣿⣿⣷⡄         Seeing")
print("⠈⠻⣿⣿⣦⣄⠀⠸⣿⣿⣆⠀⠀⠀⠉⠉⠀⠀⠀⣸⣿⣿⠃⢀⣤⣾⣿⣿⠟⠁         Eye.")
print("⠀⠀⠈⠻⣿⣿⣿⣶⣿⣿⣿⣦⣄⠀⠀⠀⢀⣠⣾⣿⣿⣿⣾⣿⣿⡿⠋⠁⠀⠀")
print("⠀⠀⠀⠀⠀⠙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠁⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠛⠿⠿⠿⠿⠿⠿⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⠀⠀⢰⣷⡦⠀⠀⠀⢀⣀⣀⠀⠀⠀⢴⣾⡇⠀⠀⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⠀⠀⣸⠟⠁⠀⠀⠀⠘⣿⡇⠀⠀⠀⠀⠙⢷⠀⠀⠀⠀⠀⠀⠀⠀")
print("⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠻⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀")
time.sleep(2)
print("██████╗ ██╗  ██╗ ██████╗  ██████╗ ███╗   ███╗ █████╗ ")
print("██╔══██╗██║  ██║██╔═══██╗██╔═══██╗████╗ ████║██╔══██╗")
print("██████╔╝███████║██║   ██║██║   ██║██╔████╔██║███████║")
print("██╔═══╝ ██╔══██║██║   ██║██║   ██║██║╚██╔╝██║██╔══██║")
print("██║     ██║  ██║╚██████╔╝╚██████╔╝██║ ╚═╝ ██║██║  ██║")
print("╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝")
time.sleep(1)
print("                      Join Us_")
time.sleep(1)
print("In Your System Since 2020.")
time.sleep(1)
print("Scanning All Data Access Points")
print("Scanning: |#--------------------")
time.sleep(0.5)
print("Scanning: |##-------------------")
time.sleep(0.5)
print("Scanning: |###------------------")
time.sleep(0.5)
print("Scanning: |####-----------------")
time.sleep(0.5)
print("Scanning: |#####----------------")
time.sleep(0.5)
print("Scanning: |######---------------")
time.sleep(0.5)
print("Scanning: |#######--------------")
time.sleep(0.5)
print("Scanning: |########-------------")
time.sleep(0.5)
print("Scanning: |#########------------")
time.sleep(0.5)
print("Scanning: |##########-----------")
time.sleep(0.5)
print("Scanning: |###########----------")
time.sleep(0.5)
print("Scanning: |############---------")
time.sleep(0.5)
print("Scanning: |#############--------")
time.sleep(0.5)
print("Scanning: |##############-------")
time.sleep(0.5)
print("Scanning: |###############------")
time.sleep(0.5)
print("Scanning: |################-----")
time.sleep(0.5)
print("Scanning: |#################----")
time.sleep(0.5)
print("Scanning: |##################---")
time.sleep(0.5)
print("Scanning: |###################--")
time.sleep(0.5)
print("Scanning: |####################-")
time.sleep(0.5)
print("Scanning: |#####################")
print("def main():")
time.sleep(0.1)      
print("	parser,args = PArguments.Main_Arguments()")
time.sleep(0.1)
print("      if args.target == False:")
time.sleep(0.1)
print("      if args.help == False:")
time.sleep(0.1)
print("     sys.exit(UsageMain())")
time.sleep(0.1) 
print("      else:")
time.sleep(0.1)
print("			sys.exit(parser.print_help())")
time.sleep(0.1)
print("      else:")
time.sleep(0.1)
print("      process = getProcess(args)")
time.sleep(0.1)
print("      if len(process()) == 0:")
time.sleep(0.1)
print("      if args.help == False:")
time.sleep(0.1)
print("      sys.exit(UsageMain())")
time.sleep(0.1)
print("      else:")
time.sleep(0.1)
print("      sys.exit(parser.print_help())")
time.sleep(0.1)
print("      else:")
time.sleep(0.1)
print("      or _ in process():")
time.sleep(0.1)
print("				Handle(_,args)")
time.sleep(0.1)

print("      if __name__ == '__main__':")
time.sleep(0.1)
print("      main()")
time.sleep(0.1)
print("      class Ping:")
time.sleep(0.1)
print("      def __init__(self,tgt,to):")
time.sleep(0.1)
print("      self.tgt = domain_resolver(tgt,True)")
time.sleep(0.1)
print("      self.to = to")
time.sleep(0.1)
print("      self.id = os.getpid() & 0xFFFF")
time.sleep(0.1)
print("      self.my_socket = create_icmp_socket(self.to)")
time.sleep(0.1)
print("      builder = PingHeader(self.tgt)")
time.sleep(0.1)
print("		self.pkt = builder.building_packet()")
time.sleep(0.1)
print("      def send(self):")
time.sleep(0.1)
print("      send_time = time.time()")
time.sleep(0.1)
print("      self.my_socket.sendto(self.pkt, (self.tgt, 1))")
time.sleep(0.1)
print("		return send_time")
time.sleep(0.1)
print("      def receive(self):")
time.sleep(0.1)
print("      while True:")
time.sleep(0.1)
print("      select_start = time.time()")
time.sleep(0.1)
print("     inputready, outputready, exceptready = select.select([self.my_socket], [], [], self.to)")
time.sleep(0.1) 
print("      select_duration = (time.time() - select_start)")
time.sleep(0.1)
print("      if inputready == []:")
time.sleep(0.1)
print("				return 0, 0, 0, None, None")
time.sleep(0.1)
print("			packet, address = self.my_socket.recvfrom(65536)")
time.sleep(0.1)
print("			receive_time = time.time()")
time.sleep(0.1)
print("      icmpHeader = packet[20:28]")
time.sleep(0.1)
print("      type, code, checksum, packetID, sequence = struct.unpack(bbHHh, icmpHeader)")
time.sleep(0.1)
print("      if packetID == self.id:")
time.sleep(0.1)
print("				return receive_time")
time.sleep(0.1)
print("			timeout = timeout - select_duration")
time.sleep(0.1)
print("      if timeout <= 0:")
time.sleep(0.1)
print("				return 0, 0, 0, None, None")
time.sleep(0.1)
print("	def _start_icmp(self):")
time.sleep(0.1)		
print("      for i in range(0,1):")
time.sleep(0.1)
print("      try:")
time.sleep(0.1)
print("      send_time = self.send()")
time.sleep(0.1)
print("      receive_time = self.receive()")
time.sleep(0.1)
print("      except:")
time.sleep(0.1)
print("				return None")
time.sleep(0.1)
print("		return (receive_time - send_time) * 10")
time.sleep(0.5)
print("Scan Complete")
print("All Data Access Points Found!")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
time.sleep(1)
print("class Server:")
time.sleep(0.1)
print("    def __init__(self, port):")
time.sleep(0.1)
print("        self.logger = logging.getLogger(LOGGER_ID)")
time.sleep(0.1)
print("        self.thread_accept = None")
time.sleep(0.1)
print("        self.port = port")
time.sleep(0.1)
print("        self.connections = []")
time.sleep(0.1)
print("        self.addresses = []")
time.sleep(0.1)
print("       self.encryption = Encryption()")
time.sleep(0.1) 
print("       self.fernet = self.encryption.fernet")
time.sleep(0.1)
print("       self.listener = socket.socket()")
time.sleep(0.1)
print("        try:")
time.sleep(0.1)
print("            self.listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR,")
time.sleep(0.1)
print("                                     1)")
time.sleep(0.1)
print("        except socket.error as e:")
time.sleep(0.1)
print("            self.logger.error(Error creating socket {e}")
time.sleep(0.1)
print("            sys.exit(0)")
time.sleep(0.1)
print("    def listen_asych(self):")
time.sleep(0.1)
print("        def bind():")
time.sleep(0.1)
print("            try:")
time.sleep(0.1)
print("                self.listener.bind((0.0.0.0, self.port))")
time.sleep(0.1)
print("                self.listener.listen(20)")
time.sleep(0.1)
print("            except socket.error as e:")
